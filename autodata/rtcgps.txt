################################################################################
##
## Filename: 	rtcgps.txt
##
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017-2020, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=rtc
@DEVID=RTC
##
## Set this to 4 for GPS access, 8 for non-GPS access
@NADDR=8
@SLAVE.TYPE=DOUBLE
@SLAVE.BUS=wb
@ACCESS=RTC_ACCESS
@CLOCK.NAME=clk
@CLKFREQHZ=@$(CLOCK.FREQUENCY)
@$CLKSTEP=((1<<48)/@$(CLOCK.FREQUENCY))
@INT.RTC.WIRE=rtc_int
@INT.RTC.PIC=altpic
@MAIN.DEFNS=
	// Definitions in support of the GPS driven RTC
	// This clock step is designed to match @$(CLOCK.FREQUENCY) Hz
	localparam	[31:0]	RTC_CLKSTEP = @$[32'h%08x](CLKSTEP);
	wire	@$(PREFIX)_ppd, @$(PREFIX)_pps;
	reg	r_@$(PREFIX)_ack;
@MAIN.INSERT=
`ifdef	GPSTRK_ACCESS
	rtcgps	#(RTC_CLKSTEP) the@$(PREFIX)(i_clk, i_reset,
		@$(SLAVE.PORTLIST),
		@$(PREFIX)_int, @$(PREFIX)_ppd,
		gps_tracking, ck_pps, gps_step[47:16], @$(PREFIX)_pps);
`else
	rtclight #(@$[32'h%x](CLKSTEP)) the@$(PREFIX)(i_clk, i_reset,
		@$(SLAVE.PORTLIST),
		@$(PREFIX)_int, @$(PREFIX)_pps, @$(PREFIX)_ppd);
`endif
@MAIN.ALT=
	assign	@$(PREFIX)_pps = 1'b0;
	assign	@$(PREFIX)_ppd = 1'b0;
@REGS.NOTE= // RTC clock registers
@REGS.N=4
@REGS.0= 0 R_CLOCK	CLOCK
@REGS.1= 1 R_TIMER	TIMER
@REGS.2= 2 R_STOPWATCH	STOPWATCH
@REGS.3= 3 R_CKALARM	ALARM CKALARM
@BDEF.DEFN=
typedef	struct	RTCLIGHT_S	{
	unsigned	r_clock, r_stopwatch, r_timer, r_alarm;
} RTCLIGHT;
@BDEF.IONAME=_rtc
@BDEF.IOTYPE=RTCLIGHT
@BDEF.OSDEF=_BOARD_HAS_RTC
@BDEF.OSVAL=static volatile @$BDEF.IOTYPE *const @$(BDEF.IONAME) = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));
#
#
@RTL.MAKE.GROUP=RTCGPS
@RTL.MAKE.SUBD=rtc
@RTL.MAKE.FILES=rtcgps.v rtcbare.v rtctimer.v rtcstopwatch.v rtcalarm.v rtclight.v
##
##
@PREFIX=subseconds
@DEVID=SUBSECONDS
@NADDR=1
@SLAVE.BUS=wb
@SLAVE.TYPE=SINGLE
@MAIN.DEFNS=
`ifndef	GPSTRK_ACCESS
	reg	[31:0]	r_@$(PREFIX)_data;
`endif
@MAIN.INSERT=
`ifdef	GPSTRK_ACCESS
	assign	@$(SLAVE.PREFIX)_idata = gps_now[31:0];
`else
	always @(posedge i_clk)
	if (@$(SLAVE.PREFIX)_stb && @$(SLAVE.PREFIX)_we)
		r_@$(PREFIX)_data <= @$(SLAVE.PREFIX)_data;
	else
		r_@$(PREFIX)_data <= r_@$(PREFIX)_data
			+ { 16'h0, RTC_CLKSTEP[31:16] };

	assign	@$(SLAVE.PREFIX)_idata = r_@$(PREFIX)_data;
`endif
@REGS.NOTE= // A register capturing subseconds, locked to GPS if present
@REGS.N=1
@REGS.0= 0 R_SUBSECONDS	SUBSECONDS
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=unsigned
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));
